// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Seg(	// @[<stdin>:3:10, :45:10]
  input  [3:0] seg_in,	// @[lab6/src/top.scala:29:14]
  output [7:0] seg_out	// @[lab6/src/top.scala:29:14]
);

  reg [7:0] casez_tmp;	// @[src/main/scala/chisel3/util/Mux.scala:141:16]
  always_comb begin	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
    casez (seg_in)	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0000:
        casez_tmp = 8'hFD;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0001:
        casez_tmp = 8'h60;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0010:
        casez_tmp = 8'hDA;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0011:
        casez_tmp = 8'hF2;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0100:
        casez_tmp = 8'h66;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0101:
        casez_tmp = 8'hB6;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0110:
        casez_tmp = 8'hBE;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b0111:
        casez_tmp = 8'hE0;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1000:
        casez_tmp = 8'hFE;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1001:
        casez_tmp = 8'hE6;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1010:
        casez_tmp = 8'hEF;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1011:
        casez_tmp = 8'h3E;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1100:
        casez_tmp = 8'h9C;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1101:
        casez_tmp = 8'h7A;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      4'b1110:
        casez_tmp = 8'h9E;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
      default:
        casez_tmp = 8'h8E;	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
    endcase	// @[lab6/src/top.scala:61:22, src/main/scala/chisel3/util/Mux.scala:141:16]
  end // always_comb
  assign seg_out = ~casez_tmp;	// @[<stdin>:3:10, :45:10, lab6/src/top.scala:57:5, src/main/scala/chisel3/util/Mux.scala:141:16]
endmodule

module top(	// @[<stdin>:87:10]
  input        clock,	// @[<stdin>:88:11]
               reset,	// @[<stdin>:89:11]
  output [7:0] seg0,	// @[lab6/src/top.scala:5:16]
               seg1	// @[lab6/src/top.scala:6:16]
);

  reg [31:0] timer;	// @[lab6/src/top.scala:8:22]
  reg [31:0] timer_REG;	// @[lab6/src/top.scala:9:48]
  reg [7:0]  lsfr;	// @[lab6/src/top.scala:11:26]
  always @(posedge clock) begin	// @[<stdin>:88:11]
    if (reset) begin	// @[<stdin>:88:11]
      timer <= 32'h0;	// @[lab6/src/top.scala:8:22]
      lsfr <= 8'h0;	// @[lab6/src/top.scala:11:26]
    end
    else begin	// @[<stdin>:88:11]
      if (timer == 32'h7A120)	// @[lab6/src/top.scala:8:22, :9:22]
        timer <= 32'h0;	// @[lab6/src/top.scala:8:22]
      else	// @[lab6/src/top.scala:9:22]
        timer <= timer_REG;	// @[lab6/src/top.scala:8:22, :9:48]
      if ((|lsfr) & timer == 32'h0)	// @[lab6/src/top.scala:8:22, :11:26, :14:{35,43,52}]
        lsfr <= {lsfr[4] ^ lsfr[3] ^ lsfr[2] ^ lsfr[0], lsfr[7:1]};	// @[lab6/src/top.scala:11:26, :12:{28,37,46,55,69,80,88}]
      else if (lsfr == 8'h0)	// @[lab6/src/top.scala:11:26, :14:81]
        lsfr <= 8'h1;	// @[lab6/src/top.scala:11:26, src/main/scala/chisel3/util/Mux.scala:141:16]
    end
    timer_REG <= timer + 32'h1;	// @[lab6/src/top.scala:8:22, :9:{48,55}]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:87:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:87:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:87:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];	// @[<stdin>:87:10]
    initial begin	// @[<stdin>:87:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:87:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:87:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:87:10]
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// @[<stdin>:87:10]
        end	// @[<stdin>:87:10]
        timer = _RANDOM[2'h0];	// @[<stdin>:87:10, lab6/src/top.scala:8:22]
        timer_REG = _RANDOM[2'h1];	// @[<stdin>:87:10, lab6/src/top.scala:9:48]
        lsfr = _RANDOM[2'h2][7:0];	// @[<stdin>:87:10, lab6/src/top.scala:11:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:87:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:87:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Seg s0 (	// @[lab6/src/top.scala:16:18]
    .seg_in  (lsfr[3:0]),	// @[lab6/src/top.scala:11:26, :20:23]
    .seg_out (seg0)
  );
  Seg s1 (	// @[lab6/src/top.scala:17:18]
    .seg_in  (lsfr[7:4]),	// @[lab6/src/top.scala:11:26, :24:23]
    .seg_out (seg1)
  );
endmodule

